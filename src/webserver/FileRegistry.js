"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("../../../polar-shared/src/Preconditions");
const Hashcodes_1 = require("../../../polar-shared/src/util/Hashcodes");
const path_1 = __importDefault(require("path"));
class FileRegistry {
    constructor(webserverConfig) {
        this.registry = {};
        this.webserverConfig = Preconditions_1.Preconditions.assertNotNull(webserverConfig);
    }
    registerFile(filename) {
        const key = Hashcodes_1.Hashcodes.create(filename);
        return this.register(key, filename);
    }
    register(key, filename) {
        filename = path_1.default.resolve(filename);
        const reqPath = "/files/" + key;
        this.registry[key] = filename;
        const scheme = this.webserverConfig.useSSL ? 'https' : 'http';
        const url = `${scheme}://${this.webserverConfig.host}:${this.webserverConfig.port}${reqPath}`;
        const result = { key, filename, url };
        return result;
    }
    hasKey(key) {
        return key in this.registry;
    }
    get(key) {
        if (!this.hasKey(key)) {
            throw new Error("Key not registered: " + key);
        }
        return {
            key,
            filename: this.registry[key]
        };
    }
}
exports.FileRegistry = FileRegistry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZVJlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRmlsZVJlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0RBQStDO0FBRS9DLGlEQUE0QztBQUU1QyxnREFBd0I7QUFNeEIsTUFBYSxZQUFZO0lBVXJCLFlBQVksZUFBZ0M7UUFGM0IsYUFBUSxHQUE0QixFQUFFLENBQUM7UUFJcEQsSUFBSSxDQUFDLGVBQWUsR0FBRyw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUV4RSxDQUFDO0lBRU0sWUFBWSxDQUFDLFFBQWdCO1FBQ2hDLE1BQU0sR0FBRyxHQUFHLHFCQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQVFNLFFBQVEsQ0FBQyxHQUFXLEVBQUUsUUFBZ0I7UUFFekMsUUFBUSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFbEMsTUFBTSxPQUFPLEdBQUcsU0FBUyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUk5QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFFOUQsTUFBTSxHQUFHLEdBQUcsR0FBRyxNQUFNLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFFOUYsTUFBTSxNQUFNLEdBQUcsRUFBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBQyxDQUFDO1FBSXBDLE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7SUFPTSxNQUFNLENBQUMsR0FBVztRQUNyQixPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ2hDLENBQUM7SUFNTSxHQUFHLENBQUMsR0FBVztRQUVsQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixHQUFHLEdBQUcsQ0FBQyxDQUFDO1NBQ2pEO1FBRUQsT0FBTztZQUNILEdBQUc7WUFDSCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7U0FDL0IsQ0FBQztJQUVOLENBQUM7Q0FFSjtBQTFFRCxvQ0EwRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJy4uL1ByZWNvbmRpdGlvbnMnO1xuaW1wb3J0IHtXZWJzZXJ2ZXJDb25maWd9IGZyb20gJy4vV2Vic2VydmVyQ29uZmlnJztcbmltcG9ydCB7SGFzaGNvZGVzfSBmcm9tICcuLi91dGlsL0hhc2hjb2Rlcyc7XG5cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG4vKipcbiAqIEEgcmVnaXN0cnkgb2YgYmluYXJ5IC8gbG9jYWwgZmlsZXMgdG8gc2VydmUgdmlhIEhUVFAgc28gdGhhdCBwZGYuanMgYW5kXG4gKiBvdGhlciBhcHBzIGNhbiBiZSBzZXJ2ZWQgdmlhIFVSTHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWxlUmVnaXN0cnkge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSB3ZWJzZXJ2ZXJDb25maWc6IFdlYnNlcnZlckNvbmZpZztcblxuICAgIC8qKlxuICAgICAqIFRoZSByZWdpc3RyeSBvZiBoYXNoY29kZXMgdG8gdGhlIGZpbGUgcGF0aCBpdCBzaG91bGQgYmUgc2VydmVkIGZyb20uXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlZ2lzdHJ5OiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHt9O1xuXG4gICAgY29uc3RydWN0b3Iod2Vic2VydmVyQ29uZmlnOiBXZWJzZXJ2ZXJDb25maWcpIHtcblxuICAgICAgICB0aGlzLndlYnNlcnZlckNvbmZpZyA9IFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbCh3ZWJzZXJ2ZXJDb25maWcpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHJlZ2lzdGVyRmlsZShmaWxlbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IEhhc2hjb2Rlcy5jcmVhdGUoZmlsZW5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlcihrZXksIGZpbGVuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGZpbGUgdG8gYmUgc2VydmVkIHdpdGggdGhlIGdpdmVuIGNoZWNrc3VtLiAgVGhlbiByZXR1cm5cbiAgICAgKiBtZXRhZGF0YSBhYm91dCB3aGF0IHdlIHJlZ2lzdGVyZWQgaW5jbHVkaW5nIGhvdyB0byBmZXRjaCB0aGUgZmlsZSB3ZVxuICAgICAqIHJlZ2lzdGVyZWQuXG4gICAgICpcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVnaXN0ZXIoa2V5OiBzdHJpbmcsIGZpbGVuYW1lOiBzdHJpbmcpOiBSZWdpc3RlckVudHJ5IHtcblxuICAgICAgICBmaWxlbmFtZSA9IHBhdGgucmVzb2x2ZShmaWxlbmFtZSk7XG5cbiAgICAgICAgY29uc3QgcmVxUGF0aCA9IFwiL2ZpbGVzL1wiICsga2V5O1xuICAgICAgICB0aGlzLnJlZ2lzdHJ5W2tleV0gPSBmaWxlbmFtZTtcblxuICAgICAgICAvLyBsb2cuaW5mbyhgUmVnaXN0ZXJlZCBuZXcgZmlsZSBhdDogJHtyZXFQYXRofSB0byAke2ZpbGVuYW1lfWApO1xuXG4gICAgICAgIGNvbnN0IHNjaGVtZSA9IHRoaXMud2Vic2VydmVyQ29uZmlnLnVzZVNTTCA/ICdodHRwcycgOiAnaHR0cCc7XG5cbiAgICAgICAgY29uc3QgdXJsID0gYCR7c2NoZW1lfTovLyR7dGhpcy53ZWJzZXJ2ZXJDb25maWcuaG9zdH06JHt0aGlzLndlYnNlcnZlckNvbmZpZy5wb3J0fSR7cmVxUGF0aH1gO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtrZXksIGZpbGVuYW1lLCB1cmx9O1xuXG4gICAgICAgIC8vIGxvZy5kZWJ1ZyhcIlVzaW5nIGZpbGUgcmVnaXN0cnkgZW50cnk6IFwiLCByZXN1bHQpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgZ2l2ZW4gaGFzaGNvZGUgaXMgcmVnaXN0ZXJlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgVGhlIGtleSB3ZSBzaG91bGQgZmV0Y2guXG4gICAgICovXG4gICAgcHVibGljIGhhc0tleShrZXk6IHN0cmluZykge1xuICAgICAgICByZXR1cm4ga2V5IGluIHRoaXMucmVnaXN0cnk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IG1ldGFkYXRhIGFib3V0IHRoZSBnaXZlbiBrZXkuXG4gICAgICpcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0KGtleTogc3RyaW5nKTogRmlsZUVudHJ5IHtcblxuICAgICAgICBpZiAoIXRoaXMuaGFzS2V5KGtleSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIktleSBub3QgcmVnaXN0ZXJlZDogXCIgKyBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLnJlZ2lzdHJ5W2tleV1cbiAgICAgICAgfTtcblxuICAgIH1cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVFbnRyeSB7XG4gICAgcmVhZG9ubHkga2V5OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgZmlsZW5hbWU6IHN0cmluZztcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlZ2lzdGVyRW50cnkgZXh0ZW5kcyBGaWxlRW50cnkge1xuICAgIHJlYWRvbmx5IHVybDogc3RyaW5nO1xufVxuIl19
