"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("polar-shared/src/Preconditions");
const Hashcodes_1 = require("polar-shared/src/util/Hashcodes");
const path_1 = __importDefault(require("path"));
class FileRegistry {
    constructor(webserverConfig) {
        this.registry = {};
        this.webserverConfig = Preconditions_1.Preconditions.assertNotNull(webserverConfig);
    }
    registerFile(filename) {
        const key = Hashcodes_1.Hashcodes.create(filename);
        return this.register(key, filename);
    }
    register(key, filename) {
        filename = path_1.default.resolve(filename);
        const reqPath = "/files/" + key;
        this.registry[key] = filename;
        const scheme = this.webserverConfig.useSSL ? 'https' : 'http';
        const url = `${scheme}://${this.webserverConfig.host}:${this.webserverConfig.port}${reqPath}`;
        const result = { key, filename, url };
        return result;
    }
    hasKey(key) {
        return key in this.registry;
    }
    get(key) {
        if (!this.hasKey(key)) {
            throw new Error("Key not registered: " + key);
        }
        return {
            key,
            filename: this.registry[key]
        };
    }
}
exports.FileRegistry = FileRegistry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZVJlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRmlsZVJlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0VBQTZEO0FBRTdELCtEQUEwRDtBQUUxRCxnREFBd0I7QUFNeEIsTUFBYSxZQUFZO0lBVXJCLFlBQVksZUFBZ0M7UUFGM0IsYUFBUSxHQUE0QixFQUFFLENBQUM7UUFJcEQsSUFBSSxDQUFDLGVBQWUsR0FBRyw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUV4RSxDQUFDO0lBRU0sWUFBWSxDQUFDLFFBQWdCO1FBQ2hDLE1BQU0sR0FBRyxHQUFHLHFCQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQVFNLFFBQVEsQ0FBQyxHQUFXLEVBQUUsUUFBZ0I7UUFFekMsUUFBUSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFbEMsTUFBTSxPQUFPLEdBQUcsU0FBUyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUk5QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFFOUQsTUFBTSxHQUFHLEdBQUcsR0FBRyxNQUFNLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFFOUYsTUFBTSxNQUFNLEdBQUcsRUFBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBQyxDQUFDO1FBSXBDLE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7SUFPTSxNQUFNLENBQUMsR0FBVztRQUNyQixPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ2hDLENBQUM7SUFNTSxHQUFHLENBQUMsR0FBVztRQUVsQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixHQUFHLEdBQUcsQ0FBQyxDQUFDO1NBQ2pEO1FBRUQsT0FBTztZQUNILEdBQUc7WUFDSCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7U0FDL0IsQ0FBQztJQUVOLENBQUM7Q0FFSjtBQTFFRCxvQ0EwRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvUHJlY29uZGl0aW9ucyc7XG5pbXBvcnQge1dlYnNlcnZlckNvbmZpZ30gZnJvbSAnLi9XZWJzZXJ2ZXJDb25maWcnO1xuaW1wb3J0IHtIYXNoY29kZXN9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdXRpbC9IYXNoY29kZXMnO1xuXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuLyoqXG4gKiBBIHJlZ2lzdHJ5IG9mIGJpbmFyeSAvIGxvY2FsIGZpbGVzIHRvIHNlcnZlIHZpYSBIVFRQIHNvIHRoYXQgcGRmLmpzIGFuZFxuICogb3RoZXIgYXBwcyBjYW4gYmUgc2VydmVkIHZpYSBVUkxzLlxuICovXG5leHBvcnQgY2xhc3MgRmlsZVJlZ2lzdHJ5IHtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgd2Vic2VydmVyQ29uZmlnOiBXZWJzZXJ2ZXJDb25maWc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVnaXN0cnkgb2YgaGFzaGNvZGVzIHRvIHRoZSBmaWxlIHBhdGggaXQgc2hvdWxkIGJlIHNlcnZlZCBmcm9tLlxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSByZWdpc3RyeToge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKHdlYnNlcnZlckNvbmZpZzogV2Vic2VydmVyQ29uZmlnKSB7XG5cbiAgICAgICAgdGhpcy53ZWJzZXJ2ZXJDb25maWcgPSBQcmVjb25kaXRpb25zLmFzc2VydE5vdE51bGwod2Vic2VydmVyQ29uZmlnKTtcblxuICAgIH1cblxuICAgIHB1YmxpYyByZWdpc3RlckZpbGUoZmlsZW5hbWU6IHN0cmluZykge1xuICAgICAgICBjb25zdCBrZXkgPSBIYXNoY29kZXMuY3JlYXRlKGZpbGVuYW1lKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXIoa2V5LCBmaWxlbmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBmaWxlIHRvIGJlIHNlcnZlZCB3aXRoIHRoZSBnaXZlbiBjaGVja3N1bS4gIFRoZW4gcmV0dXJuXG4gICAgICogbWV0YWRhdGEgYWJvdXQgd2hhdCB3ZSByZWdpc3RlcmVkIGluY2x1ZGluZyBob3cgdG8gZmV0Y2ggdGhlIGZpbGUgd2VcbiAgICAgKiByZWdpc3RlcmVkLlxuICAgICAqXG4gICAgICovXG4gICAgcHVibGljIHJlZ2lzdGVyKGtleTogc3RyaW5nLCBmaWxlbmFtZTogc3RyaW5nKTogUmVnaXN0ZXJFbnRyeSB7XG5cbiAgICAgICAgZmlsZW5hbWUgPSBwYXRoLnJlc29sdmUoZmlsZW5hbWUpO1xuXG4gICAgICAgIGNvbnN0IHJlcVBhdGggPSBcIi9maWxlcy9cIiArIGtleTtcbiAgICAgICAgdGhpcy5yZWdpc3RyeVtrZXldID0gZmlsZW5hbWU7XG5cbiAgICAgICAgLy8gbG9nLmluZm8oYFJlZ2lzdGVyZWQgbmV3IGZpbGUgYXQ6ICR7cmVxUGF0aH0gdG8gJHtmaWxlbmFtZX1gKTtcblxuICAgICAgICBjb25zdCBzY2hlbWUgPSB0aGlzLndlYnNlcnZlckNvbmZpZy51c2VTU0wgPyAnaHR0cHMnIDogJ2h0dHAnO1xuXG4gICAgICAgIGNvbnN0IHVybCA9IGAke3NjaGVtZX06Ly8ke3RoaXMud2Vic2VydmVyQ29uZmlnLmhvc3R9OiR7dGhpcy53ZWJzZXJ2ZXJDb25maWcucG9ydH0ke3JlcVBhdGh9YDtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSB7a2V5LCBmaWxlbmFtZSwgdXJsfTtcblxuICAgICAgICAvLyBsb2cuZGVidWcoXCJVc2luZyBmaWxlIHJlZ2lzdHJ5IGVudHJ5OiBcIiwgcmVzdWx0KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIGdpdmVuIGhhc2hjb2RlIGlzIHJlZ2lzdGVyZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgd2Ugc2hvdWxkIGZldGNoLlxuICAgICAqL1xuICAgIHB1YmxpYyBoYXNLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGtleSBpbiB0aGlzLnJlZ2lzdHJ5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBtZXRhZGF0YSBhYm91dCB0aGUgZ2l2ZW4ga2V5LlxuICAgICAqXG4gICAgICovXG4gICAgcHVibGljIGdldChrZXk6IHN0cmluZyk6IEZpbGVFbnRyeSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLmhhc0tleShrZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJLZXkgbm90IHJlZ2lzdGVyZWQ6IFwiICsga2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5yZWdpc3RyeVtrZXldXG4gICAgICAgIH07XG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxlRW50cnkge1xuICAgIHJlYWRvbmx5IGtleTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGZpbGVuYW1lOiBzdHJpbmc7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWdpc3RlckVudHJ5IGV4dGVuZHMgRmlsZUVudHJ5IHtcbiAgICByZWFkb25seSB1cmw6IHN0cmluZztcbn1cbiJdfQ==